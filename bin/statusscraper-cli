#!/usr/bin/env python3
### BEGIN SCRIPT INFO
# Scriptname:           statusscraper-cli
# Author:               Mohamed Abdelwahab
# Email:                mabdelwahab@dtad.de
# Last Changes:         30.08.2019
# Description:          This is a command line tool to interact with StatusScraper's configuration
### END SCRIPT INFO


import sys
import os
import re
import argparse


# Global Settings:
version = "0.1"


# Parser Definition:
parser = argparse.ArgumentParser(prog="statusscraper-cli",
                                 description="Retrieve StatusScraper's different configurations",
                                 allow_abbrev=False)
parser.version = version
parser.add_argument("-V",
                    "--version",
                    action="version")

parser.add_argument("operation",
                    metavar="<operation>",
                    choices=["get"],
                    help="The operation to perform. Currently: [get]")
parser.add_argument("configuration",
                    metavar="<configuration>",
                    help="The specific configuration to get")


# Actuall Logic:

# Parse the cli arguments
args = parser.parse_args()

cliToolPath = os.path.realpath(__file__)    # This path includes the name of this tool
confDirPath = os.path.abspath(os.path.join(cliToolPath, "../../conf"))

# Check whether there actually is a configs.py file
if not os.path.isfile(os.path.join(confDirPath,"configs.py")):
    print("Configuration file 'conf/configs.py' is missing!", file=sys.stderr)
    sys.exit(1)

# Get congigs.py content
with open(os.path.join(confDirPath, "configs.py")) as configsFile:
    content = configsFile.read()

# Get the setting requested and print it
match = re.search(r"^{configuration}\s*=\s*(['\"\[\]\(\)\s\w\/.,]*)[ \t]*$".format(configuration=args.configuration),
                    content,
                    re.MULTILINE)
if match:
    # Clean result (no unnecessary white space and quotation marks)
    result = match.group(1)
    result = re.sub(r"\B\s\B", "", result)
    result = re.sub(r"'|\"", "", result)
    print(result)
else:
    print("The requested configuration was not found")

